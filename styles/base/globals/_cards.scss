@import "compass/css3/transform";

//
// Choose Energy Card
//
// The CE Card is our standard card UI pattern. It is used for
// creating a basic card out of a given block of content.
//
// Parameters:
//  $vPadding           - Boolean toggle for vertical card padding. Defaults to `true`.
//  $hPadding           - Boolean toggle for horizontal card padding. Defaults to `true`.
//  $card-header        - Boolean toggle for the inclusion of a Card Header. Defaults to `false`.
//
// External Variables:
//  $card-corner-radius - Defines curve of a given card's corners. Defined in `_base.scss`.
//  $card-padding       - Amount of padding around a given card's edges. One edge may be overridden if a `$card-header` exists. Defined in `_base.scss`.
//  $card-header-height - Height of a given `$card-header`. Defined in `_base.scss`.
//  $color-gray-ghost   - Gray color. Defined in `_colors.scss`.
//
// No styleguide reference.
//
@mixin ce-card($vPadding: true, $hPadding: true, $card-header: false) {
    @include box-sizing(border-box);
    @include border-radius($card-corner-radius);
    @include box-shadow(rgba(0,0,0,0.2) 0px 0px 2px);
    position: relative;
    margin: 0;
    border: 1px solid $color-gray-ghost;

    @if $vPadding == true {
        padding-top: $card-padding;
        padding-bottom: $card-padding;
    } else {
        padding-top: 0;
        padding-bottom: 0;
    }
    @if $hPadding == true {
        padding-right: $card-padding;
        padding-left: $card-padding;
    } else {
        padding-right: 0;
        padding-left: 0;
    }
    @if $card-header == true {
        padding-top: $card-header-height;
    }
}
//
// Choose Energy Card Header
//
// Should only be used to implement a Card Header within a CE Card.
//
// Parameters:
//  $vPadding           - Boolean toggle for vertical card padding. Defaults to `true`.
//  $hPadding           - Boolean toggle for horizontal card padding. Defaults to `true`.
//  $card-header        - Boolean toggle for the inclusion of a Card Header. Defaults to `false`.
//
// External Variables:
//  $card-corner-radius - Defines curve of a given card's corners. Defined in `_base.scss`.
//  $card-padding       - Amount of padding around a given card's edges. One edge may be overridden if a `$card-header` exists. Defined in `_base.scss`.
//  $card-header-height - Height of a given `$card-header`. Defined in `_base.scss`.
//  $color-gray-ghost   - Gray color. Defined in `_colors.scss`.
//
// No styleguide reference.
//
@mixin ce-card-header() {
    @include box-sizing(border-box);
    @include border-radius($card-corner-radius, 0);
    position: absolute;
    top: 0;
    right: 0;
    left: 0;
    height: $card-header-height;
    line-height: $card-header-height;
}

//
// Choose Energy Slat
//
// The CE Slat is a table-like card UI pattern. It is used for
// tiling cards into a series of rows.
//
// Currently, the CE Slat is used primarily for our comparison
// shopping application's "All Plans" layout.
//
// Parameters:
//  $vPadding           - Boolean toggle for vertical card padding. Defaults to `true`.
//  $hPadding           - Boolean toggle for horizontal card padding. Defaults to `true`.
//  $slat-cap           - Boolean toggle for the inclusion of a Slat Cap. Defaults to `false`.
//
// Internal Variables:
//  $cap-width          - Variable defining the width of a Slat Cap. Defined here and in `ce-slat-cap()`.
//
// External Variables:
//  $card-padding       - Amount of padding around a given card's edges. One edge may be overridden if a $slat-cap exists. Defined in `_base.scss`.
//  $color-gray-ghost   - Gray color. Defined in `_colors.scss`.
//
// No styleguide reference.
//
@mixin ce-slat($vPadding: true, $hPadding: true, $slat-cap: false) {
    $cap-width: (3 * $card-padding);

    @include box-sizing(border-box);
    @include clearfix();
    position: relative;
    margin: 0;
    border-right: 1px solid $color-gray-ghost;
    border-bottom: 1px solid $color-gray-ghost;
    border-left: 1px solid $color-gray-ghost;

    @if $vPadding == true {
        padding-top: $card-padding;
        padding-bottom: $card-padding;
    } else {
        padding-top: 0;
        padding-bottom: 0;
    }
    @if $hPadding == true {
        padding-right: $card-padding;
        padding-left: $card-padding;
    } else {
        padding-right: 0;
        padding-left: 0;
    }
    @if $slat-cap == 'left' {
        padding-left: $cap-width;
    }
    @if $slat-cap == 'right' {
        padding-right: $cap-width;
    }
}

//
// Choose Energy Slat Cap
//
// The CE Slat Cap should only be used to implement a Slat Cap within a CE Slat.
//
// Currently, we have two variants: `left` and `right`.
//
// Parameters:
//  $cap-side           - Determines the alignment of the Slat Cap. Defaults to `left`.
//  $cap-multiplier     - Approximates the multiplier needed for setting a slat cap's width. Defaults to `4` which is the multiplier used for the Slat Cap on our Comparison Shopping App's implementation of CE Slat.
//
// Internal Variables:
//  $cap-width          - Variable defining the width of a Slat Cap. Defined here and in `ce-slat()`.
//
// External Variables:
//  $card-padding       - Amount of padding around a given card's edges. One edge may be overridden if a $slat-cap exists. Defined in `_base.scss`.
//
// No styleguide reference.
//
@mixin ce-slat-cap($cap-side: 'left', $cap-multiplier: 4) {
    $cap-width: (3 * $card-padding);

    position: absolute;
    top: 0;
    bottom: 0;
    width: $cap-width;
    height: 100%;

    @if $cap-side == 'left' {
        left: 0;

        .slat-cap-text {
            @include apply-origin((($cap-multiplier / 2) * $cap-width) (($cap-multiplier / 2) * $cap-width), false);
            @include rotate(-90deg);
            display: inline-block;
            min-width: ($cap-multiplier * $cap-width);
            height: $cap-width;
            line-height: $cap-width;
        }
    }
    @if $cap-side == 'right' {
        right: 0;

        .slat-cap-text {
            @include apply-origin((($cap-multiplier / 8) * $cap-width) (($cap-multiplier / 8) * $cap-width), false);
            @include rotate(90deg);
            display: inline-block;
            min-width: ($cap-multiplier * $cap-width);
            height: $cap-width;
            line-height: $cap-width;
        }
    }
}
